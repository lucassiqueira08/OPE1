# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.db import models


class Agenda(models.Model):
    id = models.IntegerField(primary_key=True)
    nometarefa = models.CharField(db_column='nomeTarefa', max_length=50)  # Field name made lowercase.
    nomeanimal = models.CharField(db_column='nomeAnimal', max_length=50)  # Field name made lowercase.
    responsavel = models.CharField(max_length=50)
    datahora = models.DateTimeField(db_column='dataHora', blank=True, null=True)  # Field name made lowercase.
    motivo = models.CharField(max_length=100, blank=True, null=True)
    destinatario = models.CharField(max_length=100, blank=True, null=True)
    endereco = models.CharField(max_length=100, blank=True, null=True)
    idfuncionario = models.ForeignKey('Funcionario', models.DO_NOTHING, db_column='idFuncionario', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Agenda'


class Animal(models.Model):
    id = models.IntegerField(primary_key=True)
    nome = models.CharField(max_length=50)
    peso = models.FloatField(blank=True, null=True)
    sexo = models.CharField(max_length=9)
    cor = models.CharField(max_length=30)
    nummicrochip = models.CharField(db_column='numMicrochip', unique=True, max_length=15, blank=True, null=True)  # Field name made lowercase.
    especie = models.CharField(max_length=50)
    observacao = models.CharField(max_length=300, blank=True, null=True)
    datanasc = models.CharField(db_column='dataNasc', max_length=10, blank=True, null=True)  # Field name made lowercase.
    raca = models.CharField(max_length=50)
    idproprietario = models.ForeignKey('Proprietario', models.DO_NOTHING, db_column='idProprietario', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Animal'


class Diagnostico(models.Model):
    id = models.IntegerField(primary_key=True)
    datadiagnostico = models.CharField(db_column='dataDiagnostico', max_length=10)  # Field name made lowercase.
    prescricao = models.CharField(max_length=300, blank=True, null=True)
    diagnostico = models.CharField(max_length=300)
    idanimal = models.ForeignKey(Animal, models.DO_NOTHING, db_column='idAnimal', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Diagnostico'


class Funcionario(models.Model):
    id = models.IntegerField(primary_key=True)
    apelido = models.CharField(max_length=30, blank=True, null=True)
    cpf = models.CharField(unique=True, max_length=11)
    nome = models.CharField(max_length=50)
    datanasc = models.CharField(db_column='dataNasc', max_length=10, blank=True, null=True)  # Field name made lowercase.
    cargo = models.CharField(max_length=50, blank=True, null=True)
    situacao = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Funcionario'


class Historicodedoencas(models.Model):
    id = models.IntegerField(primary_key=True)
    nomedoenca = models.CharField(db_column='nomeDoenca', max_length=50)  # Field name made lowercase.
    descricao = models.CharField(max_length=300, blank=True, null=True)
    data = models.CharField(max_length=10)
    idanimal = models.ForeignKey(Animal, models.DO_NOTHING, db_column='idAnimal', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'HistoricoDeDoencas'


class Hotel(models.Model):
    id = models.IntegerField(primary_key=True)
    telefone = models.CharField(max_length=18)
    datafimhospedagem = models.CharField(db_column='dataFimHospedagem', max_length=10)  # Field name made lowercase.
    datainiciohospedagem = models.CharField(db_column='dataInicioHospedagem', max_length=10)  # Field name made lowercase.
    observacao = models.CharField(max_length=300, blank=True, null=True)
    valordiaria = models.DecimalField(db_column='valorDiaria', max_digits=5, decimal_places=2)  # Field name made lowercase.
    idfuncionario = models.ForeignKey(Funcionario, models.DO_NOTHING, db_column='idFuncionario', blank=True, null=True)  # Field name made lowercase.
    idanimal = models.ForeignKey(Animal, models.DO_NOTHING, db_column='idAnimal', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Hotel'


class Procedimento(models.Model):
    id = models.IntegerField(primary_key=True)
    valor = models.DecimalField(max_digits=7, decimal_places=2, blank=True, null=True)
    descricao = models.CharField(max_length=300, blank=True, null=True)
    nomeprocedimento = models.CharField(db_column='nomeProcedimento', max_length=50, blank=True, null=True)  # Field name made lowercase.
    data = models.CharField(max_length=10, blank=True, null=True)
    idanimal = models.ForeignKey(Animal, models.DO_NOTHING, db_column='idAnimal', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Procedimento'


class Proprietario(models.Model):
    id = models.IntegerField(primary_key=True)
    nome = models.CharField(max_length=50)
    email = models.CharField(max_length=50, blank=True, null=True)
    cpf = models.CharField(unique=True, max_length=11)
    observacao = models.CharField(max_length=300, blank=True, null=True)
    datanasc = models.CharField(db_column='dataNasc', max_length=10, blank=True, null=True)  # Field name made lowercase.
    logradouro = models.CharField(max_length=100)
    bairro = models.CharField(max_length=50)
    cidade = models.CharField(max_length=50)
    estado = models.CharField(max_length=30)
    cep = models.CharField(max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Proprietario'


class Responsavelprocedimento(models.Model):
    idprocedimento = models.ForeignKey(Procedimento, models.DO_NOTHING, db_column='idProcedimento', primary_key=True)  # Field name made lowercase.
    idfuncionario = models.ForeignKey(Funcionario, models.DO_NOTHING, db_column='idFuncionario')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'ResponsavelProcedimento'
        unique_together = (('idprocedimento', 'idfuncionario'),)


class Telefoneproprietario(models.Model):
    telefone = models.CharField(primary_key=True, max_length=18)
    idproprietario = models.ForeignKey(Proprietario, models.DO_NOTHING, db_column='idProprietario')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'TelefoneProprietario'
        unique_together = (('telefone', 'idproprietario'),)


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'
